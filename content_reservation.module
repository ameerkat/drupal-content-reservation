<?php

// TODO replace this with actual color variable depending on type
class ContentReservation {
	public static $default_color = "#004f45";
	public static $default_textColor = "#ffffff";
}

/**
 * Implementation of hook_perm()
 */
function content_reservation_perm(){
	return array('view reservations', 'make reservations', 'modify reservations', 'administer reservations');
}

function get_color_var($nid){
	$var_name = "nid_". $nid . "_color";
	return variable_get($var_name, ContentReservation::$default_color);
}

function set_color_var($nid, $color){
	$var_name = "nid_". $nid . "_color";
	return variable_set($var_name, $color);
}

function get_textColor_var($nid){
	$var_name = "nid_". $nid . "_textColor";
	return variable_get($var_name, ContentReservation::$default_textColor);
}

function set_textColor_var($nid, $color){
	$var_name = "nid_". $nid . "_textColor";
	return variable_set($var_name, $color);
}

/**
 * Implementation of template_preprocess_hook
 */
function template_preprocess_content_reservation_list(&$variables){
	foreach ($variables['content_list'] as $reservable_content){
		$reservable_content->color = get_color_var($reservable_content->nid);
	}
}

/**
 * Implementation of hook_theme()
 */
function content_reservation_theme() {
	return array(
		'content_reservation_list' => array(
			'template' => 'content_reservation_list',
			'arguments' => array('content_list' => NULL),
		),
		'content_reservation_fullcalendar_js' => array(
			'template' => 'content_reservation_fullcalendar_js',
			'arguments' => array('event_list' => NULL),
		),
	);
}

/**
 * Helper function that gets human readable node type name from machine readable name
 */
function get_readable_content_type($machine_type_name){
	$result = db_query("SELECT * FROM {node_type} WHERE type = '%s'",  $machine_type_name);
	$row = db_fetch_object($result);
	if($row){
		return $row->name;
	} else {
		return NULL;
	}
}

function get_readable_content_title($nid){
	$result = db_query("SELECT * FROM {node} WHERE nid = %d",  $nid);
	$row = db_fetch_object($result);
	if($row){
		return $row->title;
	} else {
		return NULL;
	}
}

function render_calendar_div(){
	return "<div id=\"content_reservation-fullCalendar\"></div>";
}

function render_content_link($content_type){
	global $base_url;
	$readable = get_readable_content_type($content_type);
	return "<a href=\"$base_url/reservations/r/$content_type\" class=\"content_link\">Back to all $readable reservations</a><br />";
}

/**
 * Reservable content list page callback
 */
function content_reservation_reserve($content_type = NULL, $content_id = NULL){
	global $user, $base_url;
	drupal_add_css(drupal_get_path('module', 'content_reservation') .'/content-reservation.css');
	drupal_add_js(drupal_get_path('module', 'content_reservation') .'/lib/fullcalendar/jquery/jquery-1.5.min.js');
	drupal_add_css(drupal_get_path('module', 'content_reservation') .'/lib/fullcalendar/fullcalendar/fullcalendar.css');
	drupal_add_js(drupal_get_path('module', 'content_reservation') .'/lib/fullcalendar/fullcalendar/fullcalendar.js');
	if($content_type && !$content_id){
		// There is no content id passed in so we just display the default
		// content reservation list
		
		$content_list = array();
		$result = db_query("SELECT * FROM {node} WHERE type = '%s'",  $content_type);
		while ($row = db_fetch_object($result)) {
			$row->reservation_url = $base_url."/reservations/r/".$content_type."/".$row->nid;
			$content_list[] = $row;
		}
		if(!empty($content_list)){
			$content_name = get_readable_content_type($content_type);
			if($content_name){
				drupal_set_title("Available ".$content_name." Reservations");
			}
			$event_list_json = content_reservation_json("type", $content_type);
			drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
			return theme("content_reservation_list", $content_list);
		} else {
			return "No content found for this content type";
		}
	} elseif ($content_type && $content_id) {
		$content_title = get_readable_content_title($content_id);
		drupal_set_title("Reserve ".$content_title);
		// TODO Check to see if the actual content_id exists + Print out name
		drupal_add_css(drupal_get_path('module', 'content_reservation') .'/content-reservation.css');
		$event_list_json = content_reservation_json("nid", $content_id);
		drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
		// TODO Move this to a theme
		$to_return = render_content_link($content_type);
		$to_return .= drupal_get_form('content_reservation_reservation_form', $content_id);
		$to_return .= render_calendar_div();
		// Let them set settings for this content if they have 'administer reservations' privelages
		if(user_access('administer reservations', $user)){
			$to_return .= drupal_get_form('content_reservation_content_admin_form', $content_id);
		}
		return $to_return;
	} else {
		return "No content type specified";
	}
}

/**
 * Implementation of the reservation form
 */
function content_reservation_reservation_form($form_state, $content_id){
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="reservation_form">');
	$form['time'] = array(
		'#type' => 'fieldset',
		'#title' => t('Reservation Time'),
		'#attributes' => array('class' => 'timeRangeFieldset')
	);
	$form['time']['start'] = array(
		'#type' => 'date_select',
		'#title' => t('From'),
		'#date_format' => 'm/d/Y - H:i',
		'#date_year_range' => '0:+1',
	);
	$form['time']['end'] = array(
		'#type' => 'date_select',
		'#title' => t('To'),
		'#date_format' => 'm/d/Y - H:i',
		'#date_year_range' => '0:+1',
	);
	$form['description'] = array(
		'#type' => 'fieldset',
		'#title' => t('Description'),
		'#attributes' => array('class' => 'descriptionFieldset')
	);
	$form['description']['description'] = array(
		'#type' => 'textarea',
		'#description' => t('Short description of reservation purpose'),
		'#rows' => 4);
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#submit' => array('content_reservation_reservation_form_submit'));
	return $form;
}

/**
 * Implementation of the reservation form
 */
function content_reservation_content_admin_form($form_state, $content_id){
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="content_admin_form">');
	$form['settings'] = array(
		'#type' => 'fieldset',
		'#title' => t(get_readable_content_title($content_id).' Reservation Settings'),
		'#collapsible' => true);
	$form['settings']['color'] = array(
		'#type' => 'textfield',
		'#title' => t('Content Color'),
		'#size' => 10,
		'#description' => t('Color used to display reservations for this content on the calendar'),
		'#default_value' => get_color_var($content_id));
	$form['settings']['textColor'] = array(
		'#type' => 'textfield',
		'#title' => t('Content textColor'),
		'#size' => 10,
		'#description' => t('Color used to display reservations font for this content on the calendar'),
		'#default_value' => get_textColor_var($content_id));
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['settings']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#submit' => array('content_reservation_content_admin_form_submit'));
	return $form;
}

/**
* Event type definition
*/
class FullcalendarEvent{
	public $id;
	public $title;
	public $start;
	public $end;
	public $url;
	public $color;
	public $textColor;
	public $allDay;
}

function convert_unix_time($datetime){
	$pattern = '/(\d{4})-(\d{2})-(\d{2})\s*(\d{2}):(\d{2}):(\d{2})/';
	preg_match($pattern, $datetime, $matches);
	$year = $matches[1];
	$month = $matches[2];
	$day = $matches[3];
	$hour = $matches[4];
	$minute = $matches[5];
	$second = $matches[6];
	return mktime($hour, $minute, $second, $month, $day, $year);
}

function content_reservation_make_json($result){
	$event_list = Array();
	while ($row = db_fetch_object($result)) {
		$event = new FullcalendarEvent();
		$event->id = $row->rid;
		$event->title = $row->description;
		// Convert times to fullcalendar compatible unix timestamp
		$event->start = convert_unix_time($row->start);
		$event->end = convert_unix_time($row->end);
		$event->color = get_color_var($row->nid);
		$event->textColor = get_textColor_var($row->nid);
		$event->allDay = false;
		$event_list[] = $event;
	}
	return json_encode($event_list);
}

/**
 * Returns reservation 'events' from the database
 */
function content_reservation_json($query_type, $query_key){
	// TODO Errors
	if ($query_type == 'type'){
		// TODO Select based on get params
		$result = db_query("SELECT * FROM {content_reservation}, {node} WHERE {node}.nid = {content_reservation}.nid AND {node}.type = '%s'",  $query_key);
		return content_reservation_make_json($result);
	} else if ($query_type == 'nid'){
		$result = db_query("SELECT * FROM {content_reservation} WHERE nid = %d",  $query_key);
		return content_reservation_make_json($result);
	} else if ($query_type == 'uid'){
		$result = db_query("SELECT * FROM {content_reservation} WHERE uid = %d",  $query_key);
		return content_reservation_make_json($result);
	} else {
		return "[]";
	}
}

function content_reservation_json_print($query_type, $query_key){
	print content_reservation_json($query_type, $query_key);
}

/**
 * Implementation of the reservation form submit handler
 */
function content_reservation_reservation_form_submit($form, &$form_state){
	if(isset($form_state['values']['start']) &&
		isset($form_state['values']['end'])){
		// TODO Check for conflicts before inserting
		global $user;
		$start = $form_state['values']['start'];
		$end = $form_state['values']['end'];
		$description = $form_state['values']['description'];
		$nid = $form_state['values']['node_id'];
		$uid = $user->uid;
		db_query("INSERT INTO {content_reservation} (nid, uid, description, start, end, created, modified) VALUES (%d, %d, '%s', '%s', '%s', NOW(), NOW())", $nid, $uid, $description, $start, $end);
		drupal_set_message('Your reservation has been added.');
	}
}

/**
 * Implementation of the admin settings form submit handler
 */
function content_reservation_content_admin_form_submit($form, &$form_state){
	if(isset($form_state['values']['color']) &&
		isset($form_state['values']['textColor'])){
		$nid = $form_state['values']['node_id'];
		set_color_var($nid, $form_state['values']['color']);
		set_textColor_var($nid, $form_state['values']['textColor']);
		drupal_set_message('Content settings have been updated.');
	}
}

/**
 * Implementation of hook_menu()
 */
function content_reservation_menu() {
	$items = array();
	$items['reservations/r'] = array(
		'title' => 'Reservations',
		'description' => 'Lists reservable content',
		'page callback' => 'content_reservation_reserve',
		'access arguments' => array('view reservation'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['reservations/j'] = array(
		'title' => 'Reservations JSON',
		'description' => 'Returns reservation information wrapped in json',
		'page callback' => 'content_reservation_json_print',
		'access arguments' => array('view reservation'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}
