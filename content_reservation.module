<?php
/*
 * Copyright 2011 Ameer Ayoub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * Module that enables users to reserve drupal nodes for specified periods 
 * of time, includes a moderation queue.
 *
 * @author Ameer Ayoub <ameer.ayoub@asu.edu>
 * @todo see readme for todo list, see inline todo comments for code specific
 * general todos.
 */

/**
* Event type definition compatible with fullcalendar
* http://arshaw.com/fullcalendar/docs/event_data/Event_Object/
*/
class FullcalendarEvent{
	public $id;
	public $title;
	public $start;
	public $end;
	public $url;
	public $color;
	public $textColor;
	public $allDay;
}

/**
 * Encapsulation of module wide settings into ContentReservation namespace
 */
class ContentReservation {
	public static $default_color = "#004f45";
	public static $default_textColor = "#ffffff";
	public static $default_dateFormat = "m/d/Y - H:i";
	public static $default_dateIncrement = 1;
	public static $CODE_CREATED = 0;
	public static $CODE_APPROVED = 1;
	public static $CODE_REJECTED = 2;
}

include("content_reservation.util.inc");

/**
 * Implementation of hook_perm()
 */
function content_reservation_perm(){
	return array('view reservations', 'create reservations', 'moderate reservations',
		'modify reservations', 'administer reservations');
}

/**
 * Implementation of template_preprocess_hook for reservation list
 */
function template_preprocess_content_reservation_list(&$variables){
	// Updates the content list to contain information about colors
	// For use to display the .colorBlock div next to the link in the theme
	foreach ($variables['content_list'] as $reservable_content){
		$reservable_content->color = 
			content_reservation_get_color_var($reservable_content->nid);
	}
}

/**
 * Implementation of hook_theme()
 */
function content_reservation_theme(){
	return array(
		'content_reservation_list' => array(
			'template' => 'content_reservation_list',
			'arguments' => array('content_list' => NULL),
		),
		'content_reservation_reserve' => array(
			'template' => 'content_reservation_reserve',
			'arguments' => array('variables' => NULL),
		),
		'content_reservation_moderate' => array(
			'template' => 'content_reservation_moderate',
			'arguments' => array('content_list' => NULL),
		),
		'content_reservation_fullcalendar_js' => array(
			'template' => 'content_reservation_fullcalendar_js',
			'arguments' => array('event_list' => NULL),
		));
}

/**
 * Implementation of hook_cron
 */
function content_reservation_cron(){
	// Just updates the jquery filename for fullcalendar
	update_fc_jquery_fname();
}

/**
 * Implementation of hook_init
 */
function content_reservation_init(){
	// Disable Caching
	if (drupal_match_path($_GET['q'], 'reservations/*')){
		$GLOBALS['conf']['cache'] = FALSE;
	}
}

function content_reservation_reserve_type($key = NULL){
	// Start Common Block
	global $user, $base_url;
	$module_path = drupal_get_path('module', 'content_reservation');
	drupal_add_css($module_path.'/content-reservation.css');
	drupal_add_js($module_path.'/lib/fullcalendar/jquery/'.variable_get("fc_jquery_filename", update_fc_jquery_fname()));
	drupal_add_css($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.css');
	drupal_add_js($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.js');
	jquery_ui_add('ui.resizable');
	// End Common Block
	$content_type = $key;
	if($content_type){
		// There is no content id passed in so we just display the default
		// content reservation list
		$content_list = array();
		$result = db_query("SELECT * FROM {node} WHERE type = '%s'",  $content_type);
		while ($row = db_fetch_object($result)) {
			$row->reservation_url = $base_url."/reservations/r/id/".$row->nid;
			$content_list[] = $row;
		}
		if(!empty($content_list)){
			$content_name = get_readable_content_type($content_type);
			if($content_name){
				drupal_set_title("Available ".$content_name." Reservations");
			}
			$event_list_json = content_reservation_json("type", $content_type);
			drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
			return theme("content_reservation_list", $content_list);
		} else {
			drupal_set_message("No content found for this content type", "warning");
			return "";
		}
	} else {
		// No content type specified
		drupal_set_message("No content type specified", "warning");
		return "";
	}
}

function content_reservation_reserve_idedit($mode = NULL, $key = NULL){
	// Start Common Block
	global $user, $base_url;
	$module_path = drupal_get_path('module', 'content_reservation');
	drupal_add_css($module_path.'/content-reservation.css');
	drupal_add_js($module_path.'/lib/fullcalendar/jquery/'.variable_get("fc_jquery_filename", update_fc_jquery_fname()));
	drupal_add_css($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.css');
	drupal_add_js($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.js');
	jquery_ui_add('ui.resizable');
	// End Common Block

	if($mode == "id"){
		$content_id = $key;
	} else {
		$reservation_id = $key;
		if(!check_reservation_edit_permissions($reservation_id)){
			drupal_set_message("You do not have permission to edit this reservation", "error");
			return "";
		}
		$content_id = get_nid_from_rid($reservation_id);
	}
	$content_type = get_type_from_nid($content_id);
	$content_title = get_readable_content_title($content_id);
	if(!$content_title){
		drupal_set_message(
			"Content with nid #$content_id could not be found.", 'warning');
		return render_content_link($content_type);
	}
	drupal_set_title($content_title);
	drupal_add_css(drupal_get_path('module', 'content_reservation') .'/content-reservation.css');
	$event_list_json = content_reservation_json("nid", $content_id);
	drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
	$to_return = array();
	$to_return['content_link'] = content_reservation_get_content_link($content_type);
	$to_return['content_title'] = get_readable_content_type($content_type);
	if($reservation_id){
		$to_return['reservation_form'] = drupal_get_form('content_reservation_reservation_edit_form', $content_id, $reservation_id);
	} else {
		$to_return['reservation_form'] = drupal_get_form('content_reservation_reservation_create_form', $content_id);
	}
	$to_return['calendar_div'] = generate_calendar_div();
	// Let them set settings for this content if they have 'administer reservations' privelages
	if(user_access('administer reservations', $user)){
		$to_return['admin_form'] = drupal_get_form('content_reservation_content_admin_form', $content_id);
	}
	return theme("content_reservation_reserve", $to_return);
	//return print_r($to_return, true);
}

/**
 * Reservable content list page callback
 * @param string $mode either type, id, or edit; if type then returns a list of
 *	reservable content for that type, if id then return a form/calendar to
 *	reserve a content, if edit then display the edit form
 * @param string|integer $key the query key for the page action, either a string
 *	of the machine type for the type mode, or a node id for the id mode or
 *	the reservation id for the edit mode
 * @return string
 */
function content_reservation_reserve($mode = "type", $key = NULL){
	if($mode == "type" ){
		return content_reservation_reserve_type($key);
	} else if ($mode == "id" || $mode == "edit"){
		return content_reservation_reserve_idedit($mode, $key);
	} else {
		drupal_set_message("Invalid query mode $mode, must be one of type, id, edit", 'error');
		return "";
	}
}

include("content_reservation.moderate.inc");

/**
 * Implementation of the reservation form
 */
function content_reservation_reservation_create_form($form_state, $content_id){
	$form = array();
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="reservation_form">');
	$form['event'] = array(
		'#type' => 'fieldset',
		'#title'=> t('Add an Event'),
		'#attributes' => array('class' => 'fieldset_reservation_form'));
	$form['event']['start'] = array(
		'#type' => 'date_select',
		'#title' => t('From'),
		'#date_format' => content_reservation_get_dateFormat_var($content_id),
		'#date_year_range' => '0:+1',
		'#date_increment' => content_reservation_get_dateIncrement_var($content_id));
	$form['event']['end'] = array(
		'#type' => 'date_select',
		'#title' => t('To'),
		'#date_format' => content_reservation_get_dateFormat_var($content_id),
		'#date_year_range' => '0:+1',
		'#date_increment' => content_reservation_get_dateIncrement_var($content_id));
	$form['event']['description'] = array(
		'#type' => 'textarea',
		'#description' => t('Short description of reservation purpose'),
		'#rows' => 4,
		'#cols' => 15);
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['event']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
		'#validate' => array('content_reservation_reservation_form_validate'),
		'#submit' => array('content_reservation_reservation_create_form_submit'));
	return $form;
}

function content_reservation_reservation_edit_form($form_state, $content_id, $rid){
	if(check_reservation_edit_permissions($rid)){
		$result = db_query("SELECT start, end, description FROM {content_reservation} WHERE rid = %d", $rid);
		$row = db_fetch_object($result);
		$form = array();
		$form['div_tag'] = array(
			'#type' => 'markup',
			'#value' => '<div class="reservation_form">');
		$form['event'] = array(
			'#type' => 'fieldset',
			'#title'=> t('Edit Event'),
			'#attributes' => array('class' => 'fieldset_reservation_form'));
		$form['event']['start'] = array(
			'#type' => 'date_select',
			'#title' => t('From'),
			'#date_format' => content_reservation_get_dateFormat_var($content_id),
			'#date_year_range' => '0:+1',
			'#date_increment' => content_reservation_get_dateIncrement_var($content_id),
			'#default_value' => $row->start);
		$form['event']['end'] = array(
			'#type' => 'date_select',
			'#title' => t('To'),
			'#date_format' => content_reservation_get_dateFormat_var($content_id),
			'#date_year_range' => '0:+1',
			'#date_increment' => content_reservation_get_dateIncrement_var($content_id),
			'#default_value' => $row->end);
		$form['event']['description'] = array(
			'#type' => 'textarea',
			'#description' => t('Short description of reservation purpose'),
			'#rows' => 4,
			'#cols' => 15,
			'#default_value' => $row->description);
		$form['node_id'] = array(
			'#type' => 'value',
			'#value' => $content_id);
		$form['reservation_id'] = array(
			'#type' => 'value',
			'#value' => $rid);
		$form['event']['delete'] = array(
			'#type' => 'submit',
			'#value' => t('Delete'),
			'#submit' => array('content_reservation_reservation_form_delete'));
		$form['event']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Edit'),
			'#validate' => array('content_reservation_reservation_edit_form_validate'),
			'#submit' => array('content_reservation_reservation_edit_form_submit'));
		return $form;
	}
}

function content_reservation_reservation_form_delete($form, &$form_state){
	if(db_query("DELETE FROM {content_reservation} WHERE rid = %d", $form_state['values']['reservation_id'])){
		drupal_set_message("Event was deleted succesfully");
		drupal_goto("reservations/r/id/".$form_state['values']['node_id']);
	}
}

/**
 * Implementation of the reservation form
 */
function content_reservation_content_admin_form($form_state, $content_id){
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="content_admin_form">');
	$form['settings'] = array(
		'#type' => 'fieldset',
		'#title' => t(get_readable_content_title($content_id).' Reservation Settings'),
		'#collapsible' => true,
		'#collapsed' => true);
	$form['settings']['color'] = array(
		'#type' => 'textfield',
		'#title' => t('Content Color'),
		'#size' => 10,
		'#description' => t('Color used to display reservations for this content on the calendar'),
		'#default_value' => content_reservation_get_color_var($content_id));
	$form['settings']['textColor'] = array(
		'#type' => 'textfield',
		'#title' => t('Content Text Color'),
		'#size' => 10,
		'#description' => t('Color used to display reservations font for this content on the calendar'),
		'#default_value' => content_reservation_get_textColor_var($content_id));
	$form['settings']['dateFormat'] = array(
		'#type' => 'select',
		'#title' => t('Date Format Granularity'),
		'#default_value' => content_reservation_get_dateFormat_var($content_id),
		'#options' => array(
			'm/d/Y - H:i' => t('Minutes'),
			'm/d/Y - H' => t('Hours'),
			'm/d/Y' => t('Day'),
			'm/Y' => t('Month'),
			'Y' => t('Year')),
		'#description' => t('Reservation date format granularity.'));
	$form['settings']['dateIncrement'] = array(
		'#type' => 'textfield',
		'#title' => t('Date Increment'),
		'#size' => 10,
		'#default_value' => content_reservation_get_dateIncrement_var($content_id),
		'#description' => t('Sets the increments of the lowest granularity selector'));
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['settings']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#validate' => array('content_reservation_content_admin_form_validate'),
		'#submit' => array('content_reservation_content_admin_form_submit'));
	return $form;
}

function content_reservation_json_print($query_type, $query_key){
	print content_reservation_json($query_type, $query_key);
}

/**
 * Check for scheduling conflicts
 * Returns a conflict message if true, NULL otherwise
 * @param integer $nid the node id of the content to be reserved
 * @param string $start a formatted string containing the date time the event
 * 	starts in the formate yyyy-mm-dd hh:mm:ss
 * @param string $end a formatted string containing the date time the event
 * 	ends in the formate yyyy-mm-dd hh:mm:ss
 * @param integer $exclusion_id id of the reservation to excluse in the search
 *	in the case that you want to move a reservation without conflicting with
 *	itself. defaults to null.
 */
function check_for_conflicts($nid, $start, $end, $exclusion_id = NULL){
	if($end <= $start){
		return array(0, "Event can not end before it starts or be 0 length, please check times.");
	}
	if(!$exclusion_id){
		// We block code rejected calls so rejected events don't block event submissions
		$result = db_query("SELECT rid, start, end, description FROM {content_reservation} WHERE nid = %d AND status <> %d",  $nid, ContentReservation::$CODE_REJECTED);
	} else {
		$result = db_query("SELECT rid, start, end, description FROM {content_reservation} WHERE nid = %d AND rid <> %d AND status <> %d",  $nid, $exclusion_id, ContentReservation::$CODE_REJECTED);
	}
	while ($row = db_fetch_object($result)) {
		if (($start > $row->start && $start < $row->end) || 
			($end > $row->start && $end < $row->end)) {
			return array($row->rid, "Could not create event, conflicts with: $row->description @ $row->start");
		}
	}
	return array(-1, NULL);
}

/**
 * Implementation of the reservation form validation hanlder
 */
function content_reservation_reservation_form_validate($form, &$form_state){
	$check = check_for_conflicts($form_state['values']['node_id'], 
		$form_state['values']['start'], $form_state['values']['end']);
	if($check[1]){
		form_set_error('', $check[1]);
	}
	if($form_state['values']['description'] == ''){
		form_set_error('', "Please enter a basic description.");
	}
}

/**
 * Implementation of the reservation form validation hanlder for the edit form
 */
function content_reservation_reservation_edit_form_validate($form, &$form_state){
	$check = check_for_conflicts($form_state['values']['node_id'], 
		$form_state['values']['start'], $form_state['values']['end'], 
		$form_state['values']['reservation_id']);
	if($check[1]){
		form_set_error('', $check[1]);
	}
	if($form_state['values']['description'] == ''){
		form_set_error('', "Please enter a basic description.");
	}
}

/**
 * Implementation of the reservation form submit handler
 */
function content_reservation_reservation_create_form_submit($form, &$form_state){
	// For some reason we got double posts so I'm going to check for validity here
	if(isset($form_state['values']['start']) &&
		isset($form_state['values']['end']) &&
		isset($form_state['values']['description'])){
		$check = check_for_conflicts($form_state['values']['node_id'], 
			$form_state['values']['start'], $form_state['values']['end']);
		if(!$check[1]){
			global $user;
			$start = $form_state['values']['start'];
			$end = $form_state['values']['end'];
			$description = $form_state['values']['description'];
			$nid = $form_state['values']['node_id'];
			$uid = $user->uid;
			db_query("INSERT INTO {content_reservation} (nid, uid, description, start, end, status, created, modified) VALUES (%d, %d, '%s', '%s', '%s', %d, NOW(), NOW())", $nid, $uid, $description, $start, $end, ContentReservation::$CODE_CREATED);
			drupal_set_message('Your reservation has been added.');
		} else {
			drupal_set_message($check[1], 'error');
		}
	}
}

function content_reservation_reservation_edit_form_submit($form, &$form_state){
	// For some reason we got double posts so I'm going to check for validity here
	// May be unneccesary
	if(isset($form_state['values']['start']) &&
		isset($form_state['values']['end']) &&
		isset($form_state['values']['description'])){
		$check = check_for_conflicts($form_state['values']['node_id'], 
			$form_state['values']['start'], $form_state['values']['end'], 
			$form_state['values']['reservation_id']);
		if(!$check[1]){
			global $user;
			$start = $form_state['values']['start'];
			$end = $form_state['values']['end'];
			$description = $form_state['values']['description'];
			$uid = $user->uid;
			$rid = $form_state['values']['reservation_id'];
			db_query("UPDATE {content_reservation} SET description='%s', start='%s', end='%s', modified=NOW(), status=%d WHERE rid = %d", $description, $start, $end, ContentReservation::$CODE_CREATED, $rid);
			drupal_set_message('Event has been updated.');
		} else {
			drupal_set_message($check[1], 'error');
		}
	}
}

/**
 * Implementation of the admin settings form submit handler
 */
function content_reservation_content_admin_form_submit($form, &$form_state){
	$nid = $form_state['values']['node_id'];
	$updated = array(
			"color" => array("title" => "Color", "modified" => false),
			"textColor" => array("title" => "Text Color", "modified" => false),
			"dateFormat" => array("title" => "Date Format Granularity", "modified" => false),
			"dateIncrement" => array("title" => "Date Increment", "modified" => false));
	if(isset($form_state['values']['color'])){
		if(content_reservation_get_color_var($nid) != $form_state['values']['color']){
			content_reservation_set_color_var($nid, $form_state['values']['color']);
			$updated['color']['modified'] = true;
		}
	}
	if(isset($form_state['values']['textColor'])){
		if(content_reservation_get_textColor_var($nid) != $form_state['values']['textColor']){
			content_reservation_set_textColor_var($nid, $form_state['values']['textColor']);
			$updated['textColor']['modified'] = true;
		}
	}
	if(isset($form_state['values']['dateFormat'])){
		if(content_reservation_get_dateFormat_var($nid) != $form_state['values']['dateFormat']){
			content_reservation_set_dateFormat_var($nid, $form_state['values']['dateFormat']);
			$updated['dateFormat']['modified'] = true;
		}
	}
	if(isset($form_state['values']['dateIncrement'])){
		if (is_numeric($form_state['values']['dateIncrement'])){
			if(content_reservation_get_dateIncrement_var($nid) != $form_state['values']['dateIncrement']){
				content_reservation_set_dateIncrement_var($nid, $form_state['values']['dateIncrement']);
				$updated['dateIncrement']['modified'] = true;
			}
		} else {
			drupal_set_message("Date Increment must be numeric", error);
		}
	}
	$first = true;
	$updated_var_string = "";
	foreach ($updated as $v){
		if ($v["modified"]) {
			if ($first){
				$updated_var_string .= $v["title"];
				$first =  false;
			} else {
				$updated_var_string .= ", ".$v["title"];
			}
		}
	}
	if (!empty($updated_var_string)){
		drupal_set_message($updated_var_string.' has been updated.');
	}
}

/**
 * Implementation of hook_menu()
 */
function content_reservation_menu() {
	$items = array();
	$items['reservations/r'] = array(
		'title' => 'Reservations',
		'description' => 'Lists reservable content',
		'page callback' => 'content_reservation_reserve',
		'access arguments' => array('view reservations'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['reservations/m'] = array(
		'title' => 'Reservations Moderation Queue',
		'description' => 'Provides a list of content awaiting approval by a moderator',
		'page callback'=> 'content_reservation_moderate',
		'access arguments' => array('moderate reservations'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['reservations/j'] = array(
		'title' => 'Reservations JSON',
		'description' => 'Returns reservation information wrapped in json',
		'page callback' => 'content_reservation_json_print',
		'access arguments' => array('view reservations'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

