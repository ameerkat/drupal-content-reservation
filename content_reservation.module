<?php
/**
 * Module that enables users to reserve drupal nodes for specified periods 
 * of time.
 * @author Ameer Ayoub <ameer.ayoub@asu.edu>
 * @todo Make admin page with list of content for opt-in enable
 * @todo Human readable time on the conflict resolution message
 * @todo Hook into views and panels, and possible provide block for calendar
 */

/**
 * Start module specific helper functions and classes
 * (Anything that doesn't get called directly by drupal)
 * ==============================================
 */

/**
* Event type definition compatible with fullcalendar
* http://arshaw.com/fullcalendar/docs/event_data/Event_Object/
*/
class FullcalendarEvent{
	public $id;
	public $title;
	public $start;
	public $end;
	public $url;
	public $color;
	public $textColor;
	public $allDay;
}

/**
 * Encapsulation of module wide settings into ContentReservation namespace
 * @todo Pull the default colors from a system wide variable
 */
class ContentReservation {
	public static $default_color = "#004f45";
	public static $default_textColor = "#ffffff";
}

/**
 * Get human readable node type name from machine readable name.
 * @param string $machine_type_name machine readable name of content type
 * @return string
 */
function get_readable_content_type($machine_type_name){
	$result = db_query("SELECT name FROM {node_type} WHERE type = '%s'",  
		$machine_type_name);
	$row = db_fetch_object($result);
	if($row){
		return $row->name;
	} else {
		return NULL;
	}
}

/**
 * Get the content title based on the node id
 * @param integer $nid the node id of the node to get the title of
 */
function get_readable_content_title($nid){
	$result = db_query(
		"SELECT title FROM {node} WHERE nid = %d ORDER BY vid DESC",
		$nid);
	$row = db_fetch_object($result);
	if($row){
		return $row->title;
	} else {
		return NULL;
	}
}

/**
 * Returns the proper div container for the calendar display.
 * @return string
 */
function generate_calendar_div(){
	return "<div id=\"content_reservation-fullCalendar\"></div>";
}

/**
 * Returns a string containing an html formatted link to reservation for
 * a specific content type.
 * @param string $content_type machine readable content type
 * @return string
 */
function render_content_link($content_type){
	return "<a href=\"".content_reservation_get_content_link($content_type)
		."\">Back to $content_type</a>";
}

/**
 * Generate a plain text url to the reservation page for a specific content
 * type.
 * @param string $content_type machine readable content type
 * @return string
 */
function content_reservation_get_content_link($content_type){
	global $base_url;
	$readable = get_readable_content_type($content_type);
	return $base_url."/reservations/r/type/".$content_type;
}

/**
 * Converts the unix timestamp based on an input date time string in the
 * format of yyyy-mm-dd hh:mm:ss
 * @param string $datetime The formatted date time
 * @return integer
 */
function convert_unix_time($datetime){
	$pattern = '/(\d{4})-(\d{2})-(\d{2})\s*(\d{2}):(\d{2}):(\d{2})/';
	if (preg_match($pattern, $datetime, $matches) > 0){
		$year = $matches[1];
		$month = $matches[2];
		$day = $matches[3];
		$hour = $matches[4];
		$minute = $matches[5];
		$second = $matches[6];
		return mktime($hour, $minute, $second, $month, $day, $year);
	} else {
		drupal_set_message(
			"Incorrect date time format, date time must be in the format ".
			"yyyy-mmm-dd hh:mm:ss", "error");
		return 0;
	}
}

/**
 * Whether the current logged in user has permissions to edit the reservation
 * @param integer $id Either ther user id or the reservation id of the 
 * 	reservation being checked for edit permission.
 * @param string $mode Either rid or uid as to what the $id represents with
 * 	respect to the reservation. defaults to rid.
 * @return boolean
 * @global user Uses the global user object of the current logged in user
 */
function check_reservation_edit_permissions($id, $mode = "rid"){
	global $user;
	if($mode == "rid"){
		if(user_access("modify reservations", $user)){
			return true;
		} else {
			$result = db_query(
				"SELECT rid, uid FROM {content_reservation} WHERE rid = %d",
				$rid);
			$row = db_fetch_object($result);
			if($row){
				if ($row->uid == $user.$rid){
					return true;
				}
			}
			return false;
		}
	} else if ($mode == "uid"){
		if(user_access("modify reservations", $user)){
			return true;
		} else if($user->uid == $uid) {
			return true;
		} else {
			return false;
		}
	} else {
		// Error: Invalid Mode
		drupal_set_message(
			"Invalid edit_permissions mode; must be one of uid or rid",
			"error");
		return false;
	}
}

/**
 * Generates a json array of serialized FullcalendarEvent objects
 * @param DatabaseStatementInterface $result The db_query return value to a
 *	query on the reservations db table.
 * @return string
 */
function content_reservation_make_json($result){
	$event_list = Array();
	while ($row = db_fetch_object($result)) {
		$event = new FullcalendarEvent();
		$event->id = $row->rid;
		$event->title = $row->description;
		// Convert times to fullcalendar compatible unix timestamp
		$event->start = convert_unix_time($row->start);
		$event->end = convert_unix_time($row->end);
		$event->color = content_reservation_get_color_var($row->nid);
		$event->textColor = content_reservation_get_textColor_var($row->nid);
		$event->allDay = false;
		if(check_reservation_edit_permissions($row->uid, "uid")){
			global $base_url;
			$event->url = $base_url."/reservations/r/edit/".$row->rid;
		}
		$event_list[] = $event;
	}
	return json_encode($event_list);
}

/**
 * Returns reservation events as serialized json FullCalender event object 
 * arrays based on various search queries.
 * @todo Throw a serialized error on invalid query
 * @todo Change url scheme to work off of get params instead of url slugs
 * @param string $query_type The type of query to be executed one of
 * `{type, nid, uid}. For querying on the content type, associated content node,
 * 	or associated user respectively.
 * @param string|integer $query_key The query key, either a string if type or
 *	a integer id nid or uid.
 * @return string
 */
function content_reservation_json($query_type, $query_key){
	if ($query_type == 'type'){
		$result = db_query("SELECT * FROM {content_reservation}, {node} WHERE {node}.nid = {content_reservation}.nid AND {node}.type = '%s'",  $query_key);
		return content_reservation_make_json($result);
	} else if ($query_type == 'nid'){
		$result = db_query("SELECT * FROM {content_reservation} WHERE nid = %d",  $query_key);
		return content_reservation_make_json($result);
	} else if ($query_type == 'uid'){
		$result = db_query("SELECT * FROM {content_reservation} WHERE uid = %d",  $query_key);
		return content_reservation_make_json($result);
	} else {
		// If invalid query then return empty array
		return "[]";
	}
}

/**
 * Some helper function for getting and setting content calendar colors
 * @todo Consider making a separate database table as these may get large
 * @todo Append content_reservation_ to the beginning of these so as not to conflict
 */
function content_reservation_get_color_var($nid){
	$var_name = "nid_". $nid . "_color";
	return variable_get($var_name, ContentReservation::$default_color);
}

function content_reservation_set_color_var($nid, $color){
	$var_name = "nid_". $nid . "_color";
	return variable_set($var_name, $color);
}

function content_reservation_get_textColor_var($nid){
	$var_name = "nid_". $nid . "_textColor";
	return variable_get($var_name, ContentReservation::$default_textColor);
}

function content_reservation_set_textColor_var($nid, $color){
	$var_name = "nid_". $nid . "_textColor";
	return variable_set($var_name, $color);
}

/**
 * ==============================================
 * End module specific helper functions and classes
 */

/**
 * Implementation of hook_perm()
 */
function content_reservation_perm(){
	return array('view reservations', 'create reservations', 
		'modify reservations', 'administer reservations');
}

/**
 * Implementation of template_preprocess_hook for reservation list
 */
function template_preprocess_content_reservation_list(&$variables){
	// Updates the content list to contain information about colors
	// For use to display the .colorBlock div next to the link in the theme
	foreach ($variables['content_list'] as $reservable_content){
		$reservable_content->color = 
			content_reservation_get_color_var($reservable_content->nid);
	}
}

/**
 * Implementation of hook_theme()
 */
function content_reservation_theme(){
	return array(
		'content_reservation_list' => array(
			'template' => 'content_reservation_list',
			'arguments' => array('content_list' => NULL),
		),
		'content_reservation_reserve' => array(
			'template' => 'content_reservation_reserve',
			'arguments' => array('variables' => NULL),
		),
		'content_reservation_fullcalendar_js' => array(
			'template' => 'content_reservation_fullcalendar_js',
			'arguments' => array('event_list' => NULL),
		));
}

/**
 * Searches for the appropriate jquery filename that came packaged with fullcalendar
 */
function update_fc_jquery_fname(){
	$path = drupal_get_path('module', 'content_reservation') 
		. "/lib/fullcalendar/jquery";
	$pattern = "/^jquery-\d+.*\.js/";
	foreach(scandir($path) as $file){
		if (preg_match($pattern, $file, $matches)){
			variable_set("fc_jquery_filename", $file);
			return $file;
		}
	}
	return -1;
}

/**
 * Implementation of hook_cron
 */
function content_reservation_cron(){
	// Just updates the jquery filename for fullcalendar
	update_fc_jquery_fname();
}

function get_nid_from_rid($reservation_id){
	$result = db_query(
		"SELECT rid, nid FROM {content_reservation} WHERE rid = %d",
		$reservation_id);
	$row = db_fetch_object($result);
	if($row){
		return $row->nid;
	} else {
		return NULL;
	}
}

function get_type_from_nid($nid){
	$result = db_query("SELECT nid, type FROM {node} WHERE nid = %d",  $nid);
	$row = db_fetch_object($result);
	if($row){
		return $row->type;
	} else {
		return NULL;
	}
}

/**
 * Implementation of hook_init
 */
function content_reservation_init(){
	// Disable Caching
	if (drupal_match_path($_GET['q'], 'reservations/*')){
		$GLOBALS['conf']['cache'] = FALSE;
	}
}

/**
 * Reservable content list page callback
 * @param string $mode either type, id, or edit; if type then returns a list of
 *	reservable content for that type, if id then return a form/calendar to
 *	reserve a content, if edit then display the edit form
 * @param string|integer $key the query key for the page action, either a string
 *	of the machine type for the type mode, or a node id for the id mode or
 *	the reservation id for the edit mode
 * @return string
 * @todo Add a main page that lists all content type and map it to a url via hook_menu
 * @todo Make the events editable with proper permissions
 */
function content_reservation_reserve($mode = "type", $key = NULL){
	global $user, $base_url;
	$module_path = drupal_get_path('module', 'content_reservation');
	drupal_add_css($module_path.'/content-reservation.css');
	drupal_add_js($module_path.'/lib/fullcalendar/jquery/'.variable_get("fc_jquery_filename", update_fc_jquery_fname()));
	drupal_add_css($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.css');
	drupal_add_js($module_path.'/lib/fullcalendar/fullcalendar/fullcalendar.js');
	if($mode == "type" ){
		$content_type = $key;
		if($content_type){
			// There is no content id passed in so we just display the default
			// content reservation list
			$content_list = array();
			$result = db_query("SELECT * FROM {node} WHERE type = '%s'",  $content_type);
			while ($row = db_fetch_object($result)) {
				$row->reservation_url = $base_url."/reservations/r/id/".$row->nid;
				$content_list[] = $row;
			}
			if(!empty($content_list)){
				$content_name = get_readable_content_type($content_type);
				if($content_name){
					drupal_set_title("Available ".$content_name." Reservations");
				}
				$event_list_json = content_reservation_json("type", $content_type);
				drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
				return theme("content_reservation_list", $content_list);
			} else {
				drupal_set_message("No content found for this content type",
					"warning");
				return "";
			}
		} else {
			// No content type specified
			drupal_set_message("No content type specified",
				"warning");
			return "";
		}
	} else if ($mode == "id" || $mode == "edit"){
		if($mode == "id"){
			$content_id = $key;
		} else {
			$reservation_id = $key;
			if(!check_reservation_edit_permissions($reservation_id)){
				drupal_set_message(
					"You do not have permission to edit this reservation",
					"error");
				return "";
			}
			$content_id = get_nid_from_rid($reservation_id);
		}
		$content_type = get_type_from_nid($content_id);
		$content_title = get_readable_content_title($content_id);
		if(!$content_title){
			drupal_set_message(
				"Content with nid #$content_id could not be found.", 'warning');
			return render_content_link($content_type);
		}
		drupal_set_title($content_title);
		drupal_add_css(drupal_get_path('module', 'content_reservation') .'/content-reservation.css');
		$event_list_json = content_reservation_json("nid", $content_id);
		drupal_add_js(theme("content_reservation_fullcalendar_js", $event_list_json), 'inline');
		$to_return = array();
		$to_return['content_link'] = content_reservation_get_content_link($content_type);
		$to_return['content_title'] = get_readable_content_type($content_type);
		if($reservation_id){
			$to_return['reservation_form'] = drupal_get_form('content_reservation_reservation_edit_form', $content_id, $reservation_id);
		} else {
			$to_return['reservation_form'] = drupal_get_form('content_reservation_reservation_create_form', $content_id);
		}
		$to_return['calendar_div'] = generate_calendar_div();
		// Let them set settings for this content if they have 'administer reservations' privelages
		if(user_access('administer reservations', $user)){
			$to_return['admin_form'] = drupal_get_form('content_reservation_content_admin_form', $content_id);
		}
		return theme("content_reservation_reserve", $to_return);
		//return print_r($to_return, true);
	} else {
		drupal_set_message(
			"Invalid query mode $mode, must be one of type, id, edit", 'error');
		return "";
		
	}
}

/**
 * Implementation of the reservation form
 */
function content_reservation_reservation_create_form($form_state, $content_id){
	$form = array();
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="reservation_form">');
	$form['event'] = array(
		'#type' => 'fieldset',
		'#title'=> t('Add an Event'),
		'#attributes' => array('class' => 'fieldset_reservation_form'));
	$form['event']['start'] = array(
		'#type' => 'date_select',
		'#title' => t('From'),
		'#date_format' => 'm/d/Y - H:i',
		'#date_year_range' => '0:+1');
	$form['event']['end'] = array(
		'#type' => 'date_select',
		'#title' => t('To'),
		'#date_format' => 'm/d/Y - H:i',
		'#date_year_range' => '0:+1');
	$form['event']['description'] = array(
		'#type' => 'textarea',
		'#description' => t('Short description of reservation purpose'),
		'#rows' => 4,
		'#cols' => 15);
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['event']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
		'#validate' => array('content_reservation_reservation_form_validate'),
		'#submit' => array('content_reservation_reservation_create_form_submit'));
	return $form;
}

function content_reservation_reservation_edit_form($form_state, $content_id, $rid){
	if(check_reservation_edit_permissions($rid)){
		$result = db_query("SELECT start, end, description FROM {content_reservation} WHERE rid = %d", $rid);
		$row = db_fetch_object($result);
		$form = array();
		$form['div_tag'] = array(
			'#type' => 'markup',
			'#value' => '<div class="reservation_form">');
		$form['event'] = array(
			'#type' => 'fieldset',
			'#title'=> t('Edit Event'),
			'#attributes' => array('class' => 'fieldset_reservation_form'));
		$form['event']['start'] = array(
			'#type' => 'date_select',
			'#title' => t('From'),
			'#date_format' => 'm/d/Y - H:i',
			'#date_year_range' => '0:+1',
			'#default_value' => $row->start);
		$form['event']['end'] = array(
			'#type' => 'date_select',
			'#title' => t('To'),
			'#date_format' => 'm/d/Y - H:i',
			'#date_year_range' => '0:+1',
			'#default_value' => $row->end);
		$form['event']['description'] = array(
			'#type' => 'textarea',
			'#description' => t('Short description of reservation purpose'),
			'#rows' => 4,
			'#cols' => 15,
			'#default_value' => $row->description);
		$form['node_id'] = array(
			'#type' => 'value',
			'#value' => $content_id);
		$form['reservation_id'] = array(
			'#type' => 'value',
			'#value' => $rid);
		$form['event']['delete'] = array(
			'#type' => 'submit',
			'#value' => t('Delete'),
			'#submit' => array('content_reservation_reservation_form_delete'));
		$form['event']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Edit'),
			'#validate' => array('content_reservation_reservation_edit_form_validate'),
			'#submit' => array('content_reservation_reservation_edit_form_submit'));
		return $form;
	}
}

function content_reservation_reservation_form_delete($form, &$form_state){
	if(db_query("DELETE FROM {content_reservation} WHERE rid = %d", $form_state['values']['reservation_id'])){
		drupal_set_message("Event was deleted succesfully");
		drupal_goto("reservations/r/id/".$form_state['values']['node_id']);
	}
}

/**
 * Implementation of the reservation form
 */
function content_reservation_content_admin_form($form_state, $content_id){
	$form['div_tag'] = array(
		'#type' => 'markup',
		'#value' => '<div class="content_admin_form">');
	$form['settings'] = array(
		'#type' => 'fieldset',
		'#title' => t(get_readable_content_title($content_id).' Reservation Settings'),
		'#collapsible' => true,
		'#collapsed' => true);
	$form['settings']['color'] = array(
		'#type' => 'textfield',
		'#title' => t('Content Color'),
		'#size' => 10,
		'#description' => t('Color used to display reservations for this content on the calendar'),
		'#default_value' => content_reservation_get_color_var($content_id));
	$form['settings']['textColor'] = array(
		'#type' => 'textfield',
		'#title' => t('Content textColor'),
		'#size' => 10,
		'#description' => t('Color used to display reservations font for this content on the calendar'),
		'#default_value' => content_reservation_get_textColor_var($content_id));
	$form['node_id'] = array(
		'#type' => 'value',
		'#value' => $content_id);
	$form['settings']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#validate' => array('content_reservation_content_admin_form_validate'),
		'#submit' => array('content_reservation_content_admin_form_submit'));
	return $form;
}

function content_reservation_json_print($query_type, $query_key){
	print content_reservation_json($query_type, $query_key);
}

/**
 * Check for scheduling conflicts
 * Returns a conflict message if true, NULL otherwise
 * @param integer $nid the node id of the content to be reserved
 * @param string $start a formatted string containing the date time the event
 * 	starts in the formate yyyy-mm-dd hh:mm:ss
 * @param string $end a formatted string containing the date time the event
 * 	ends in the formate yyyy-mm-dd hh:mm:ss
 * @param integer $exclusion_id id of the reservation to excluse in the search
 *	in the case that you want to move a reservation without conflicting with
 *	itself. defaults to null.
 * @todo make exclusion an array of ids
 */
function check_for_conflicts($nid, $start, $end, $exclusion_id = NULL){
	if($end < $start){
		return array(0, "Event can not end before it starts, please check times.");
	}
	if(!$exclusion_id){
		$result = db_query("SELECT rid, start, end, description FROM {content_reservation} WHERE nid = %d",  $nid);
	} else {
		$result = db_query("SELECT rid, start, end, description FROM {content_reservation} WHERE nid = %d AND rid <> %d",  $nid, $exclusion_id);
	}
	while ($row = db_fetch_object($result)) {
		if (($start > $row->start && $start < $row->end) || 
			($end > $row->start && $end < $row->end)) {
			return array($row->rid, "Could not create event, conflicts with: $row->description @ $row->start");
		}
	}
	return array(-1, NULL);
}

/**
 * Implementation of the reservation form validation hanlder
 */
function content_reservation_reservation_form_validate($form, &$form_state){
	$check = check_for_conflicts($form_state['values']['node_id'], 
		$form_state['values']['start'], $form_state['values']['end']);
	if($check[1]){
		form_set_error('', $check[1]);
	}
	if($form_state['values']['description'] == ''){
		form_set_error('', "Please enter a basic description.");
	}
}

/**
 * Implementation of the reservation form validation hanlder
 */
function content_reservation_reservation_edit_form_validate($form, &$form_state){
	$check = check_for_conflicts($form_state['values']['node_id'], 
		$form_state['values']['start'], $form_state['values']['end'], 
		$form_state['values']['reservation_id']);
	if($check[1]){
		form_set_error('', $check[1]);
	}
	if($form_state['values']['description'] == ''){
		form_set_error('', "Please enter a basic description.");
	}
}

/**
 * Implementation of the reservation form submit handler
 */
function content_reservation_reservation_create_form_submit($form, &$form_state){
	// For some reason we got double posts so I'm going to check for validity here
	if(isset($form_state['values']['start']) &&
		isset($form_state['values']['end']) &&
		isset($form_state['values']['description'])){
		$check = check_for_conflicts($form_state['values']['node_id'], 
			$form_state['values']['start'], $form_state['values']['end']);
		if(!$check[1]){
			global $user;
			$start = $form_state['values']['start'];
			$end = $form_state['values']['end'];
			$description = $form_state['values']['description'];
			$nid = $form_state['values']['node_id'];
			$uid = $user->uid;
			db_query("INSERT INTO {content_reservation} (nid, uid, description, start, end, created, modified) VALUES (%d, %d, '%s', '%s', '%s', NOW(), NOW())", $nid, $uid, $description, $start, $end);
			drupal_set_message('Your reservation has been added.');
		} else {
			drupal_set_message($check[1], 'error');
		}
	}
}

function content_reservation_reservation_edit_form_submit($form, &$form_state){
	// For some reason we got double posts so I'm going to check for validity here
	// May be unneccesary
	if(isset($form_state['values']['start']) &&
		isset($form_state['values']['end']) &&
		isset($form_state['values']['description'])){
		$check = check_for_conflicts($form_state['values']['node_id'], 
			$form_state['values']['start'], $form_state['values']['end'], 
			$form_state['values']['reservation_id']);
		if(!$check[1]){
			global $user;
			$start = $form_state['values']['start'];
			$end = $form_state['values']['end'];
			$description = $form_state['values']['description'];
			$uid = $user->uid;
			$rid = $form_state['values']['reservation_id'];
			db_query("UPDATE {content_reservation} SET description='%s', start=%d, end=%d, modified=NOW() WHERE rid = %d", $description, $start, $end, $rid);
			drupal_set_message('Event has been updated.');
		} else {
			drupal_set_message($check[1], 'error');
		}
	}
}

/**
 * Implementation of the admin settings form submit handler
 */
function content_reservation_content_admin_form_submit($form, &$form_state){
	if(isset($form_state['values']['color']) &&
		isset($form_state['values']['textColor'])){
		$nid = $form_state['values']['node_id'];
		content_reservation_set_color_var($nid, $form_state['values']['color']);
		content_reservation_set_textColor_var($nid, $form_state['values']['textColor']);
		drupal_set_message('Content settings have been updated.');
	}
}

/**
 * Implementation of hook_menu()
 */
function content_reservation_menu() {
	$items = array();
	$items['reservations/r'] = array(
		'title' => 'Reservations',
		'description' => 'Lists reservable content',
		'page callback' => 'content_reservation_reserve',
		'access arguments' => array('view reservations'),
		'type' => MENU_CALLBACK,
	);
	$items['reservations/j'] = array(
		'title' => 'Reservations JSON',
		'description' => 'Returns reservation information wrapped in json',
		'page callback' => 'content_reservation_json_print',
		'access arguments' => array('view reservations'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}
